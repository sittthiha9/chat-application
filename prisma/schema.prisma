generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  passwordHash  String
  image         String?
  accounts      Account[]
  friend        Friend?

  @@map("users")
}

model Friend {
  id                String    @id @default(cuid())
  userId            String    @unique
  name              String
  gender            String
  dateOfBirth       DateTime
  created           DateTime  @default(now())
  updated           DateTime  @default(now())
  bio               String?
  city              String?
  country           String?
  image             String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos            Photo[]
  sourceLikes       Like[]    @relation("source")
  trargetLikes      Like[]    @relation("target")
  senderMessages    Message[] @relation("sender")
  recipientMessages Message[] @relation("recipient")
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String?

  friendId String
  friend   Friend @relation(fields: [friendId], references: [id], onDelete: Cascade)
}

model Like {
  sourceUserId String
  sourceFriend Friend @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)
  targetUserId String
  targetFriend Friend @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}

model Message {
  id               String    @id @default(cuid())
  text             String
  created          DateTime  @default(now())
  senderId         String?
  recipientId      String?
  sender           Friend?   @relation("sender", fields: [senderId], references: [userId], onDelete: SetNull)
  recipient        Friend?   @relation("recipient", fields: [recipientId], references: [userId], onDelete: SetNull)
  dateRead         DateTime?
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)
}

model Otp {
  id          String   @id @default(cuid())
  email       String
  otp         String
  expiration  DateTime
  createdAt   DateTime @default(now())

  @@map("otps")
}